% Initialization of Data and variables
clc;
clear all;
close all;

nr_data_bits = 50;
b_data = (randn(1, nr_data_bits)) > 0.5;
b = [b_data];
d = zeros(1, length(b));

% Modulation
for n = 1:length(b)
    if b(n) == 0
        d(n) = exp(1i * 2 * pi);
    else
        d(n) = exp(1i * pi);
    end
end

disp(d)
bpsk = d;

figure(1);
plot(real(d), imag(d), 'o');
axis([-2 2 -2 2]);
grid on;
xlabel('Real');
ylabel('Imaginary');
title('BPSK Constellation');

SNR = 0:24;
BER1 = [];
SNR1 = [];

for snr = 0:length(SNR)-1
    sigma = sqrt(10^(-SNR(snr+1) / 10));
    snbpsk = (real(bpsk) + sigma * randn(size(bpsk))) + 1i * (imag(bpsk) + sigma * randn(size(bpsk)));
    
    figure(2);
    plot(real(snbpsk), imag(snbpsk), 'o');
    axis([-2 2 -2 2]);
    grid on;
    xlabel('Real');
    ylabel('Imaginary');
    title('BPSK Constellation with Noise');
    
    % Receiver
    r = snbpsk;
    bhat = real(r) < 0;
    bhat = bhat(:)';
    bhat1 = bhat;
    ne = sum(b ~= bhat1);
    BER = ne / nr_data_bits;
    BER1 = [BER1 BER];
    SNR1 = [SNR1 SNR(snr+1)];
end

figure(3);
semilogy(SNR1, BER1, '-*');
grid on;
xlabel('SNR = Eb/No (dB)');
ylabel('BER');
title('Simulation of BER for BPSK');
legend('BER-simulated');